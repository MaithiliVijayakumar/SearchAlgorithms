#include <stdio.h>

#define MAX_NODES 10
#define INF 9999

int visited[MAX_NODES];

void hillClimb(int graph[MAX_NODES][MAX_NODES], int heuristic[MAX_NODES], int start, int goal, int n) {
    int current = start;
    visited[current] = 1;
    printf("Starting at node %d\n", current);

    while (current != goal) {
        int bestNeighbor = -1;
        int bestHeuristic = INF;

        for (int neighbor = 0; neighbor < n; neighbor++) {
            if (graph[current][neighbor] > 0 && !visited[neighbor]) {
                if (heuristic[neighbor] < bestHeuristic) {
                    bestHeuristic = heuristic[neighbor];
                    bestNeighbor = neighbor;
                }
            }
        }

        if (bestNeighbor == -1) {
            printf("No better move found. Stuck at node %d.\n", current);
            return;
        }

        current = bestNeighbor;
        visited[current] = 1;
        printf("Moved to node %d (h=%d)\n", current, bestHeuristic);
    }

    printf("Goal node %d reached!\n", goal);
}

int main() {
    int n = 7; 
    int graph[MAX_NODES][MAX_NODES] = {0};
    graph[0][2] = graph[2][0] = 1; // S-B
    graph[0][1] = graph[1][0] = 1; // S-A
    graph[1][4] = graph[4][1] = 1; // A-D
    graph[2][3] = graph[3][2] = 1; // B-C
    graph[2][5] = graph[5][2] = 1; // B-E
    graph[2][6] = graph[6][2] = 1; // B-G
    graph[4][6] = graph[6][4] = 1; // D-G

    int heuristic[MAX_NODES] = {5, 4, 2, 6, 1, 7, 0};
    for (int i = 0; i < MAX_NODES; i++) visited[i] = 0;

    int startNode = 0; 
    int goalNode = 6; 

    printf("Hill Climbing Search:\n");
    hillClimb(graph, heuristic, startNode, goalNode, n);

    return 0;
}
