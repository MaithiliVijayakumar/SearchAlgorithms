#include <stdio.h>

#define MAX_NODES 10
#define INF 9999

typedef struct {
    int node;
    int heuristic;
} Candidate;

int visited[MAX_NODES];

void sortCandidates(Candidate arr[], int count) {
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (arr[j].heuristic < arr[i].heuristic) {
                Candidate temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

void beamSearch(int graph[MAX_NODES][MAX_NODES], int heuristic[MAX_NODES], int start, int goal, int n, int beamWidth) {
    Candidate currentLevel[MAX_NODES];
    int currentCount = 0;

    currentLevel[currentCount++] = (Candidate){start, heuristic[start]};
    visited[start] = 1;

    while (currentCount > 0) {
        for (int i = 0; i < currentCount; i++) {
            if (currentLevel[i].node == goal) {
                printf("Goal %d found!\n", goal);
                return;
            }
        }

        Candidate nextLevel[MAX_NODES];
        int nextCount = 0;
        for (int i = 0; i < currentCount; i++) {
            int node = currentLevel[i].node;
            printf("Expanding node %d (h=%d)\n", node, heuristic[node]);

            for (int neighbor = 0; neighbor < n; neighbor++) {
                if (graph[node][neighbor] && !visited[neighbor]) {
                    visited[neighbor] = 1;
                    nextLevel[nextCount++] = (Candidate){neighbor, heuristic[neighbor]};
                }
            }
        }

        sortCandidates(nextLevel, nextCount);
        if (nextCount > beamWidth) nextCount = beamWidth;

        // Move nextLevel â†’ currentLevel
        for (int i = 0; i < nextCount; i++) {
            currentLevel[i] = nextLevel[i];
        }
        currentCount = nextCount;
    }

    printf("Goal not found.\n");
}

int main() {
    int n = 7; 

  
    int graph[MAX_NODES][MAX_NODES] = {0};
    graph[0][1] = graph[1][0] = 1; // S-A
    graph[0][2] = graph[2][0] = 1; // S-B
    graph[1][4] = graph[4][1] = 1; // A-D
    graph[2][3] = graph[3][2] = 1; // B-C
    graph[2][5] = graph[5][2] = 1; // B-E
    graph[4][6] = graph[6][4] = 1; // D-G
    graph[3][6] = graph[6][3] = 1; // C-G

    
    int heuristic[MAX_NODES] = {5, 4, 2, 3, 1, 6, 0};

    for (int i = 0; i < MAX_NODES; i++) visited[i] = 0;

    int startNode = 0; 
    int goalNode = 6;  
    int beamWidth = 2; 

    printf("Beam Search (beam width = %d):\n", beamWidth);
    beamSearch(graph, heuristic, startNode, goalNode, n, beamWidth);

    return 0;
}
